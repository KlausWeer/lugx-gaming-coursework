# .github/workflows/game-service-ci.yaml

name: CI/CD for Game Service

on:
  push:
    branches:
      - main
    paths:
      - 'game_service/**'

jobs:
  # --- JOB 1: Build and Push the Docker Image ---
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.get_sha.outputs.sha }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Get commit SHA
      id: get_sha
      run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./game_service
        push: true
        tags: binalweerasena/game_service:${{ steps.get_sha.outputs.sha }}

  # --- JOB 2: Deploy the new image to Kubernetes ---
  deploy:
    runs-on: ubuntu-latest
    # This job depends on the 'build-and-push' job finishing successfully
    needs: build-and-push
    steps:
    - name: Deploy to Kubernetes
      run: echo "Deploying image binalweerasena/game_service:${{ needs.build-and-push.outputs.image_tag }}..."
      # In a real cloud environment, this step would look like this:
      # - name: Set up Kubeconfig
      #   uses: azure/k8s-set-context@v3
      #   with:
      #     method: kubeconfig
      #     kubeconfig: ${{ secrets.KUBE_CONFIG }} # A secret containing the cluster credentials
      #
      # - name: Deploy new image
      #   run: kubectl set image deployment/game-service-deployment game-service=YOUR_DOCKERHUB_USERNAME/game_service:${{ needs.build-and-push.outputs.image_tag }}

  # --- JOB 3: Run Integration Tests After Deployment ---
  test:
    runs-on: ubuntu-latest
    # This job depends on the 'deploy' job finishing successfully
    needs: deploy
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: pip install pytest requests

    - name: Run integration test against live service
      run: echo "Testing http://your-live-service-url/api/games..."
      # In a real environment, you would run:
      # env:
      #   SERVICE_URL: "http://your-live-service-url" # The public URL of your application
      # run: python -m pytest game_service/